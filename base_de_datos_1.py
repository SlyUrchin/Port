# -*- coding: utf-8 -*-
"""Base de datos 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V0hNU3tPY5akYhM5kQ7yXY28TahKRaHr

Recreando los pasos de clase para memorizarlos.
"""

from google.colab import drive

drive.mount('/content/drive')

import pandas as pd

inmuebles = pd.read_csv('/content/drive/MyDrive/inmuebles_bogota.csv')
inmuebles.head()

"""".shape" sirve para tener a forma del data set
↓↓↓↓↓↓
"""

inmuebles.shape

"""Filas - Columnas ⇈⇈⇈⇈

".columns" sirve para ver los nombres de mis columnas ↓↓↓↓↓↓
"""

inmuebles.columns

"""".rename" para cambiar nombres de columnas con un diccionaro ↓↓↓↓↓↓"""

columnas = {'Baños':'Banos', 'Área':'Area'}
inmuebles = inmuebles.rename(columns = columnas)
inmuebles.sample(11)

"""".info" sirve para ver la información de los datos ↓↓↓↓↓↓"""

inmuebles.info()

"""".iloc[  ]" para conocer qué hay en X fila/numero del índice"""

inmuebles.iloc[444]

"""".iloc[num:num]" para traer ese pedazo del índice ↓↓↓↓↓↓"""

inmuebles.iloc[444:450]

"""Se queda un dato antes del segundo número ⇈⇈⇈⇈

se puede traer el dato concreto de una zelda ↓↓↓↓↓↓
"""

inmuebles['Valor'][444]

"""También se puede traer una porción ↓↓↓↓↓↓"""

inmuebles['Valor'][444:450]

""""type(   )"Conocer el tipo de estrucura ↓↓↓↓↓↓"""

type(inmuebles['Valor'][444:450])

"""".mean(  )" para conocer el promedio de una columna ↓↓↓↓↓↓"""

inmuebles.Area.mean()

inmuebles.sample(100)

"""Para ver los datos uno a uno se hace una igualdad con el dato que queremos analizar ↓↓↓↓↓↓"""

inmuebles.Barrio == 'Los Rosales'

"""Para conocer el total se usa una suma y dentro la igualdad ↓↓↓↓↓↓"""

sum(inmuebles.Barrio == 'Los Rosales')

"""También se puede guardar en una variable↓↓↓↓↓↓"""

inmuebles_rosales = (inmuebles.Barrio == 'Los Rosales')
inmuebles_rosales

"""Con esta variable podemos crear un data frame con los datos que solo sean del "barrio" seleccionado ↓↓↓↓↓↓"""

Los_Rosales = inmuebles[inmuebles_rosales]
Los_Rosales

"""Y con ello podemos manipular de diferetnes formas la información, por ejemplo ↓↓↓↓↓↓"""

Los_Rosales.Area.mean()

"""".value_count(   )" para contar la aparición de un dato en específico ↓↓↓↓↓↓
"len(  )" para ver el conteo total de datos únicos/diferentes
"""

len(inmuebles.Barrio.value_counts())

inmuebles.Barrio.value_counts()

len(inmuebles.UPZ.value_counts())

inmuebles.UPZ.value_counts()

"""".plot" para visualizar en gráfico ↓↓↓↓↓↓"""

inmuebles_barrios = inmuebles.Barrio.value_counts()
inmuebles_barrios.plot.bar()

"""para ver una sección de los datos agregamos algún acceso como ".head(  )" ↓↓↓↓↓↓"""

inmuebles_barrios.head(10).plot.bar()

"""**==========================================================================================================================================================TAREA=====================================================================================================================================================**

TAREA 1
"""

len(inmuebles.Barrio.value_counts())

numero_barrios = inmuebles.Barrio.value_counts()
numero_barrios

inmuebles.groupby('Barrio')['Area'].mean()

area_promedio = inmuebles.groupby('Barrio')['Area'].mean()
area_promedio.sort_values(ascending=False)

top = area_promedio.sort_values(ascending=False)
top.head(10).plot.bar()

"""TAREA 2

El valor máximo, mínimo, mediana, conteo
"""

inmuebles.describe()

pd.DataFrame(inmuebles.max())

pd.DataFrame(inmuebles.min())

inmuebles[['Banos', 'Area', 'Habitaciones']].median()

inmuebles.groupby('Barrio')['Area', 'Banos', 'Habitaciones'].median()

inmuebles[['Banos', 'Area', 'Habitaciones']].mean()

inmuebles.groupby('Barrio')['Area', 'Banos', 'Habitaciones'].mean()

"""# Hecho de forma individual sin .groupy en todas las columnas, por si solo se quiere concer una columna específica

Mediana general de área:
"""

inmuebles.Area.median()

"""Mediana de área por Barrio:"""

inmuebles.groupby('Barrio')['Area'].median()

"""Mediana general Habitaciones:"""

inmuebles.Habitaciones.median()

"""**Mediana de Habitaciones por barrio:"""

inmuebles.groupby('Barrio')['Habitaciones'].median()

"""Mediana general baños:"""

inmuebles.Banos.median()

"""Mediana baños por barrio:"""

inmuebles.groupby('Barrio')['Banos'].median()

"""**==========================================================================================================================================================TAREA=====================================================================================================================================================**

**AULA 2**
"""

inmuebles.sample(5)

inmuebles.info()

type(inmuebles.Valor[0])

"""Al estar el valor en tipo string u objeto, no se pueden sumar, sino que se juntan los textos """

inmuebles.Valor[0]+inmuebles.Valor[1]+inmuebles.Valor[:5]

"""Lo que hace es concadenar porque está en str (objeto)

'.split' separa una cadena de texto en función de un parametro que le otorguemos ↓↓↓↓↓↓
"""

inmuebles.Valor[0].split()

"""Primero se debe convertir los valores a str, porque 'inmuebles.Valor' es un PandaSeries ↓↓↓↓↓↓"""

inmuebles.Valor.str.split()

"""'expand=True' muestra los valores como un Data frame ↓↓↓↓↓↓"""

inmuebles.Valor.str.split(expand=True)

"""También podemos cambiar el nombre de las columnas de ese Data Frame e integrarlo al original"""

valor = inmuebles.Valor.str.split(expand=True)
inmuebles['Moneda'] = valor[0]
inmuebles['Precio'] = valor[1]
inmuebles.sample(3)

inmuebles.info()

"""Debido al punto lo sigue tomando como cadena de caracteres, así que al hacer las suma los va a concadenar, primero se tiene que hacer un tratamiento"""

inmuebles['Precio'].sum()

"""".replace(' ',' ')" sirve para cambiar un valor o caracter por otro ↓↓↓↓↓↓"""

inmuebles['Precio'] = inmuebles['Precio'].str.replace('.','',regex=True)

inmuebles[['Precio','Barrio']]

inmuebles.info()

"""".astype" para asignar el nuevo tipo de dato ↓↓↓↓↓↓"""

#inmuebles.drop(['Precio_Milon'], axis=1, inplace=True)

inmuebles['Precio_Millon'] = inmuebles.Precio.astype('float')/1000000
inmuebles.info()

inmuebles.describe()

"""Para ajustar los decimales ↓↓↓↓↓↓"""

pd.set_option('display.precision',2)
pd.set_option('display.float_format', lambda x: '%.2f' % x)
inmuebles.describe()

inmuebles.loc[inmuebles.Habitaciones == 110]

inmuebles.loc[inmuebles.Area == 2]

"""Los "bins" son para el rango del histograma ↓↓↓↓↓↓"""

inmuebles['Precio_Millon'].plot.hist(bins=100)

"""Para traer las bibliotecas de visualizacion ↓↓↓↓↓↓

"plt.figure(figsize(10,8))" tamaño del lienzo el primer numero para el ancho y el segundo la altura ↓↓↓↓↓↓

"kde=True" para curva de densidad
"""

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10,4))
grafica = sns.histplot(data=inmuebles, x='Precio_Millon', kde=True, hue='Tipo')
grafica.set_title('Distribucion de valores de los inmuebles en Bogota en millones de pesos')
plt.xlim((50,1000))
plt.savefig('/content/drive/MyDrive/Grafica/Grafica.png',format='png')
plt.show()

"""Limite en Y ↓↓↓↓↓↓"""

plt.figure(figsize=(10,6))
grafica = sns.histplot(data=inmuebles, x='Precio_Millon', kde=True, hue='Tipo')
grafica.set_title('Distribucion de valores de los inmuebles en Bogota en millones de pesos')
plt.xlim((50,1000))
plt.ylim((0,20))
plt.savefig('/content/drive/MyDrive/Grafica/Grafica_zoom.png',format='png')
plt.show()

"""**===============================================================================================================TAREA==============================================================================================================**

TAREA 1
"""

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10,6))

comparacion = inmuebles.query("Tipo in ['Oficina/Consultorio', 'Local', 'Lote']")
grafica2 = sns.histplot(data=comparacion, x= 'Precio_Millon', hue='Tipo', kde=True, multiple='dodge', palette='mako')
grafica2.set_title('Valores para negocios en Bogota')

grafica2.set_xlabel('Precio por millon', fontsize= 15, color= 'red')
grafica2.set_ylabel('Numero de inmuebles', fontsize= 15, color= 'green')

plt.setp(grafica2.get_legend().get_title(), fontsize= 18, color= 'purple')
plt.setp(grafica2.get_legend().get_texts(), fontsize= 16, color= 'blue')

plt.xlim(0,3500)

plt.savefig('/content/drive/MyDrive/Grafica/Grafica2.png', format='png')
plt.show()

"""A traves de esto podems concluir que al momento de pensar en poner un negocio, lo mas rentable es buscar una oficina o consultorio, ya que hay una mayor caontidad de ellos y una variedad de precios accesibles.

TAREA 2

El precio por metro cuadrado para cada inmueble en el data frame
"""

inmuebles['precio_m2']= inmuebles['Precio_Millon']/inmuebles['Area']
inmuebles.sample(5)

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12,8), facecolor='black')
inmuebles['precio_m2'] = (inmuebles.Precio_Millon / inmuebles.Area)
precio_m2_barrio= pd.DataFrame(inmuebles.groupby("Barrio")["precio_m2"].mean().sort_values(ascending=False))
precio_m2_barrio.reset_index(inplace=True)
print(f"El dataset contiene {len(precio_m2_barrio)} barrios")

g = sns.barplot(x="precio_m2", y= "Barrio", palette="viridis", data=precio_m2_barrio.head(10))
g.set_facecolor('black')
g.set_title("Barrios mas caros en promedio por m2", fontsize=20, color= 'blue')
g.set_xlabel('Precio por m2', fontsize= 15, color='red')
g.set_ylabel('Barrios', fontsize= 15, color='red')
plt.xticks(fontsize=12, color='green')
plt.yticks(fontsize=12, color ='green')
plt.savefig('/content/drive/MyDrive/Grafica2_0.png', format='png')
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12,8), facecolor='black')
inmuebles['precio_m2'] = (inmuebles.Precio_Millon / inmuebles.Area)
precio_m2_barrio= pd.DataFrame(inmuebles.groupby("Barrio")["precio_m2"].mean().sort_values(ascending=True))
precio_m2_barrio.reset_index(inplace=True)
print(f"El dataset contiene {len(precio_m2_barrio)} barrios")

g = sns.barplot(x="precio_m2", y= "Barrio", palette="viridis", data=precio_m2_barrio.head(10))
g.set_facecolor('black')
g.set_title("Barrios mas baratos promedio por m2", fontsize=20, color= 'blue')
g.set_xlabel('Precio por m2', fontsize= 15, color='red')
g.set_ylabel('Barrios', fontsize= 15, color='red')
plt.xticks(fontsize=12, color='green')
plt.yticks(fontsize=12, color ='green')
plt.savefig('/content/drive/MyDrive/Grafica2_1.png', format='png')
plt.show()

"""**===============================================================================================================TAREA==============================================================================================================**

**AULA 3**

QUE CORAJE SI ESTABA BIEN YO AAAAAAAAAAAA

Ni modos, asi pasa, ahora toca hacer el procedimiento de la idea que no sabía como se podía ejecutar uwu
"""

inmuebles['precio_m2'] = inmuebles['Precio_Millon'] / inmuebles['Area']
inmuebles.head(3)

inmuebles.groupby('Barrio').mean()

"""El primer paso a seguir es crear un nuevo data frame en el que se sumen todos los promedios, y a continuación trabajar con ese data frame ↓↓↓↓↓↓"""

datos_barrio= inmuebles.groupby('Barrio').sum()
datos_barrio

"""Luego agregar una nueva columna con el verdadero valor por m2 ↓↓↓↓↓↓"""

datos_barrio['Valor_m2']= datos_barrio['Precio_Millon'] / datos_barrio['Area']
datos_barrio

"""Ahora toca sustituir esos valores en el data frame original

En este caso lo haremos con un diccionario y luego un mapeo ↓↓↓↓↓↓
"""

dict(datos_barrio['Valor_m2'])

m2_barrio= dict(datos_barrio['Valor_m2'])
inmuebles['Valor_m2']= inmuebles['Barrio']
inmuebles['Valor_m2']= inmuebles['Valor_m2'].map(m2_barrio)
inmuebles.head(5)

"""".value_counts()[:num].index" para tomar el indice de una columna y seleccionar la cantidad con el contador ↓↓↓↓↓↓"""

inmuebles['Barrio'].value_counts()[:10].index

"""Ahora hacemos que 'Barrio' sea una columna ↓↓↓↓↓↓"""

#Luego lo podemos asignar a una variable 
top_barrios= inmuebles['Barrio'].value_counts()[:10].index

#luego lo reemplazamos en el data frame de datos_barrio
datos_barrio.reset_index(inplace=True)
datos_barrio

"""Se pueden hacer consultas en el data set creado

el '@' sirve para hacer referencia a la variable
"""

datos_barrio.query('Barrio in @top_barrios')
#devuelve los datos en un data frame

"""se puede hacer una grafica usando la consulta"""

plt.figure(figsize=(10,6))
ax= sns.barplot(x='Barrio', y= 'Valor_m2', data= datos_barrio.query('Barrio in @top_barrios'))
ax.tick_params(axis='x', rotation=45)

plt.figure(figsize=(10,8))
ax = sns.boxplot(x="Barrio", y="precio_m2", data = inmuebles.query('Barrio in @top_barrios'))
ax.tick_params(axis='x', rotation=45)
plt.show()

plt.figure(figsize=(10,8))
ax = sns.boxplot(x="Barrio", y="precio_m2", data = inmuebles.query('Barrio in @top_barrios & precio_m2 <15'))
ax.tick_params(axis='x', rotation=45)
plt.show()

plt.figure(figsize=(10,8))
ax = sns.boxplot(x="Barrio", y="Area", data = inmuebles.query('Barrio in @top_barrios & Area <500'))
ax.tick_params(axis='x', rotation=45)
plt.show()

plt.figure(figsize=(10,8))
ax = sns.boxplot(x="Barrio", y="Precio_Millon", data = inmuebles.query('Barrio in @top_barrios & Precio_Millon <2000'))
ax.tick_params(axis='x', rotation=45)
plt.show()

"""Vamos a traer datos estadísticos de la ciudad de Bogotá, directamente del DANE y vamos a ver como estos datos nos ayudarían en inclusión de nuevas variables para el cálculo del precio de los inmuebles en la ciudad de Bogotá.

Encuesta Multiproposito de Bogotá para obtener información socio-económica y de entorno urbano de los habitantes de Bogotá para la formulación, seguimiento y evaluación de las políticas distritales.

https://microdatos.dane.gov.co/index.php/catalog/743
"""

